services:
  # MongoDB Database
  mongodb:
    image: mongo:7-jammy
    container_name: nms-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: nms_db
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - "27017:27017"
    networks:
      - nms-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nms-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/nms_db?authSource=admin
      JWT_SECRET: ${JWT_SECRET:-please-set-JWT_SECRET-environment-variable-for-security}
      JWT_EXPIRES_IN: 24h
      CREATE_ADMIN_USER: "true"
      ADMIN_USERNAME: admin
      ADMIN_EMAIL: admin@example.com
      ADMIN_PASSWORD: "SecureAdminPassword123!"
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    networks:
      - nms-network
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./backend/logs:/usr/src/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); http.get('http://localhost:5000/api/health', (res) => { if (res.statusCode === 200) process.exit(0); else process.exit(1); }).on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nms-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
      REACT_APP_WS_URL: http://localhost:5000
    ports:
      - "3000:3000"
    networks:
      - nms-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  mongodb_data:
    driver: local

networks:
  nms-network:
    driver: bridge